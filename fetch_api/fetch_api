Fetch API jest interfejsem pozwalającym na asynchroniczne pobieranie zasobów. Dotychczas aby pobrać zasób z serwera korzystało się z obiektu XMLHttpRequest (XHR). Fetch API powstało aby uprościć sposób komunikacji z serwerem, korzysta także z obietnic (link do obietnic) co bardziej odpowiada dzisiejszym standardom programowania i zapobiega wielokrotnym wywołaniom zwrotnym.

Zobaczmy jak wyglądała komunikacja z serwerem zanim powstało Fetch API.

Większość przeglądarek w tamtych czasach wykorzystywała obiekt XMLHttpRequest w celu pobierania zasobów z serwera. Większość to niestety nie znaczy wszystkie. Microsoft w przeglądarce Internet Explorer zaimplementował ten standard jako ActiveXObject co spowodowało że jeśli chcieliśmy aby nasz program działał zarówno na IE jak też na Safari czy pod Netscape należało wspierać oba te rozwiązania.

var request;
if (window.XMLHttpRequest) { // Mozilla, Safari, ...
  request = new XMLHttpRequest();
} else if (window.ActiveXObject) { // IE
  try {
    request = new ActiveXObject('Msxml2.XMLHTTP');
  } 
  catch (e) {
    try {
      request = new ActiveXObject('Microsoft.XMLHTTP');
    } 
    catch (e) {}
  }
}


Mając utworzony obiekt request mogliśmy następnie wysłać żądanie do serwera.

request.open('GET', 'https://jsonplaceholder.typicode.com/posts/1', true);
request.send();
// state changes
request.onreadystatechange = function() {
	if(request.readyState === 4) { // done
		if(request.status === 200) { // complete	
			console.log(request.responseText)
		}
	}
};

https://jsfiddle.net/gz5exu5x/

W powyższym przykładzie posłużyliśmy się EventHandlerem o nazwie onreadystatechange, który wywoływany jest za każdym razem gdy zmieni się stan readyState. XMLHttpRequest.readyState może odpowiedzieć jednym z pięciu stanów od 0 do 4. Dzięki temu mogliśmy sprawdzić na jakim etapie jest przetwarzanie naszego żądania. Status oznaczony cyfrą 4 (Done) informował że żądanie zostało zakończone i można było przejść do zbadania jakim statusem http odpowiedział serwer. W powyższym przykładzie sprawdzamy czy żądanie zakończyło się statusem 200 (OK) i jeśli tak to przystępujemy do wypisania otrzymanych danych na konsoli.

Ponieważ korzystanie z tak niskopoziomowego API nie należało do najwygodniejszych, powstało wiele bibliotek opakowujących XHR. Do najpopularniejszych należały rozwiązania a biblioteki Jquery:
jQuery.ajax(), jQuery.get(), jQuery.post(). 

$.ajax('https://jsonplaceholder.typicode.com/posts/1', {
  success: (data) => {
  	console.log(JSON.stringify(data));
  },
});

https://jsfiddle.net/3g4ww3t2/

Aby polecenie ajax() zadziałało w ten sam sposób, co porzednio zaprezentowane, wystarczyło wywołać metodę ajax() z odpowiednim parametrem i odpowiednio obsłużyć dane, które otrzymaliśmy.

FETCH API

Przez ponad dekadę użycie obiektu XMLHttpRequest było jedynym sposobem na stworzenie asynchronicznego żądania w JavaScript. Pomimo ogromnej użyteczności, używanie XHR nie należało do najprzyjemniejszych. Podstawowe wady tego rozwiązania to:
 - brak separacji zagadnień (Separation of Concern),
 - stan żądania oraz jego input i output były zarządzane poprzez interakcje z jednym obiektem,
 - użycie Eventów do śledzenia stanu obiektu odstaje od obecnych standardów skupionych wokół Promisów (obietnic link).

Fetch API rozwiązuje większość problemów związanych z użyciem XHR, a ponieważ korzysta z obietnic, tym samym zapobiega wielokrotnym wywołaniom zwrotnym zwanym "callback hell". Fetch API wprowadza do języka JavaScript obiekty Headers, Request, Response i Body, których nazwy dobrze znamy z protokołu HTTP.

Metoda fetch()

Podstawą pracy z FetchAPI jest użycie metody fetch() do asynchronicznego pobrania danych z serwera.
Zobaczmy jak to działa na najprostrzym przykładzie.

fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => response.json())
  .then(json => console.log(json));

https://jsfiddle.net/j1vs64vx/

W przykładzie powyżej metoda fetch() jako parametr przyjmuje adres URL do zdalnego zasobu. Następnie po wykonaniu żądania, odpowiedź zamienia na obiekt za pomocą metody json() (https://developer.mozilla.org/en-US/docs/Web/API/Body/json), otrzymany obiekt wypisujemy na konsolę.


Oczywiście oprócz pobierania danych za pomocą metody HTTP GET, możemy także komunikować się za pomocą różnych innych metod HTTP (POST, PUT, DELETE czy też OPTIONS). Przykład poniżej pokazuje jak wysłać dane za pomoca metody POST.

const data = {
    title: 'Test title',
    body: 'Test body',
    userId: 42
}

const options = {
   method: 'POST',
   body: JSON.stringify(data),
   headers: {
       'Content-Type': 'application/json'
   }
};

fetch('https://jsonplaceholder.typicode.com/posts', options)
  .then(response => response.json())
  .then(json => console.log(json));

https://jsfiddle.net/6dhqcjop/

Na początku tworzymy obiekt data z danymi które chcemy wysłać, następnie w obiekcie option definujemy rodzaj metody HTTP, w naszym przypadku POST, a do zmiennej body przypisujemy wcześniej utworzony obkiekt data. Podobnie jak w poprzenim przykładzie też jako pierwszy parametr ustawiamy adres URL pod który będziemy wysyłac dane, drugim parametrem będzie nasz obiekt option na podstawie którego metoda fetch określi jaką metode http ma użyć do wysłania danych, z jakimi danymi i jakimi nagłówkami.

W odpowiedzi serwis jsonplaceholder zwróci nam następujący obiekt który wypiszemy na konsoli.

{
  "title": "Test title",
  "body": "Test body",
  "userId": 42,
  "id": 101
}

Fetch + async/await

Ponieważ metoda fetch() zawsze zwróci nam obietnicę, świetnie sie nam to wpisuje w konwencję async/await. (Jeśli temat async/await nie jest Ci dobrze znany zachęcam do zapoznania się z artykułem na ten temat - link !!!). Dzięki temu możemy sprawić że nasz kod będzie bardziej czytelny i łatwiejszy do zrozumienia.

Poniżej przykład zastosowania async/await do pobrania listy imion użytkowników z serwisu jsonplaceholder.

async function fetchUsers(url) {
  const response = await fetch(url);
  const json = await response.json();
  const listOfusernames = json.map(user => user.username);

  console.log(listOfusernames);
}

fetchUsers('https://jsonplaceholder.typicode.com/users');

W odpowiedzi na konsoli powinniśmy zobaczyć tablicę z imionami użytkowników

[
  "Bret",
  "Antonette",
  "Samantha",
  "Karianne",
  "Kamren",
  "Leopoldo_Corkery",
  "Elwyn.Skiles",
  "Maxime_Nienow",
  "Delphine",
  "Moriah.Stanton"
]

https://jsfiddle.net/9nro6dcr/

Metoda fetch() w praktyce, czyli nie ma ryby bez ości

Zazwyczaj mamy nadzieje że nasza komunikacja z serwerem zakończy się sukcesem i otrzymamy dane których się spodziewaliśmy. Czasami jednak, z różnych przyczyn, wysłanie żądania do serwera nie zwraca nam zadowalającej odpowiedzi. Przeanalizujmy scenariusz, w którym zasób jest nieosiągalny a API zwraca nam status 404.

Na początek stwórzmy zapytanie do API podając błędny adres i spróbujmy wychwycić błąd za pomocą metody catch().

fetch('https://api.github.com/users/dariuszwzresien/repos')
  .then(data => console.log('dane z serwera: ', data))
  .catch(error => console.log('błąd: ', error));

https://jsfiddle.net/f5v1cfuL/

Jak się jednak okaże, catch() nie został wywołany, a dane zostały obsłużone w taki sposób jakby całe zapytanie zostało poprawnie wykonane. Zobaczmy więc jakie dane otrzymaliśmy.

Response
​{
bodyUsed: false
headers: Headers {}
ok: false
redirected: false
status: 404
statusText: "Not Found"
type: "cors"
url: "https://api.github.com/users/dariuszwzresien/repos"
}
​
Dlaczego metoda fetch() nie przechwyciła informacji o statusie błędu 404?
Jak możemy przeczytać w dokumentacji, metoda fetch() zakończy się jako promise.reject() z błędem TypeError w przypadku braku możliwości dostania się do żądanej strony np. z powodu literówki w nazwie domeny lub z przyczyn bezpieczeństwa.

fetch('https://api.guthub.com/users/dariuszwzresien/repos') //literówka w nazwie api.guthub.com
  .then(response => response.json())
  .then(data => console.log('dane z serwera: ', data))
  .catch(error => console.log('błąd: ', error));

https://jsfiddle.net/2dsyyjLm/

W tym przypadku nasze żądanie zostanie obsłużone przez metodę catch() i w konsoli zostanie wypisany komunikat z błedem:

```
błąd: TypeError: NetworkError when attempting to fetch resource.
```

Jeśli jednak chcielibyśmy aby metoda fetch() reagowała wywołaniem metody catch() w przypadku otrzymania statusu HTTP 404, możemy sami wymusić wywołanie promise.reject().

Najpierw napiszmy metodę, która w odpowiedni sposób zareaguje na otrzymaną odpowiedź z serwera. Metoda handleResponse() na podstawie otrzymanej odpowiedzi sprawdzi czy status jest równy 404 i jeśli tak, to odrzuci obietnice, powodując tym samym wywołanie metody catch() w łańcuchu wywołań fetch().

```
function handleResponse(response) {
  if (response.status === 404) {
  	return Promise.reject(response);
  }
  return response.json();
}

fetch('https://api.github.com/users/dariuszwzresien/repos')
  .then(handleResponse)
  .then(data => console.log('dane z serwera: ', data))
  .catch(error => console.log('błąd: ', error));
```

Obiekty Fetch API

Wspomniałem wcześniej że Fetch API oprócz metody fetch() wprowadziło do języka JavasScript obiekty Response, Request i Headers.
Przyjrzyjmy się zatem każdemu z nich.

Response

Jak możemy zauważyć w przykładzie poniżej, rezultatem jaki zwróci nam metoda fetch() nie są tylko dane wystawione przez serwer ale cały obiekt Response, w którym znajdziemy informację na temat żądania i odpowiedzi. Oprócz tego że obiekt Response jest tworzony przez metodę fetch() mamy też możliwość utworzyć go z poziomu JavaScript, z tej możliwości skorzystamy głównie podczas pracy z Service Workerami (więcej na temat Service Workerów możesz przeczytać w artykule o Progressive Web Apps http://devenv.pl/progressive-web-apps/).

Zobaczmy jak zbudowany jest obiekt Response który otrzymujemy z wywołania metody fetch().

async function fetchUsers(url) {
  const response = await fetch(url);
  console.log(response);
}

fetchUsers('https://jsonplaceholder.typicode.com/users');

https://jsfiddle.net/nfmoLn8a/

Na konsoli zostanie wypisany następujący obiekt:

Response {
type: "cors", 
url: "https://jsonplaceholder.typicode.com/users", 
redirected: false, 
status: 200, 
ok: true, 
body: ReadableStream, 
bodyUsed: false, 
headers: Headers
}


headers

Zmienna headers jest obiektem typu Headers (https://developer.mozilla.org/en-US/docs/Web/API/Headers) który udostępnia nam między innymi metody has() oraz get() za pomocą których możemy sprawdzić nagłówki otrzymanej odpowiedzi z serwera. 

async function fetchUsers(url) {
  const response = await fetch(url);
  console.log(response.headers.has('Content-Type')); //true
  console.log(response.headers.get('Content-Type')); //application/json; charset=utf-8
}

fetchUsers('https://jsonplaceholder.typicode.com/users');

https://jsfiddle.net/13oyd340/

status / statusText

Status zwraca nam kod odpowiedzi HTTP a statusText jego reprezentację tekstową. Więcej informacji na ten temat możesz znaleźć w wikipedii https://pl.wikipedia.org/wiki/Kod_odpowiedzi_HTTP


body

Aby dostać się do zawartości body możemy użyć metody: text(), json() lub blob(). Różnica między nimi jest taka że metoda text() zwróci nam obiekt w postaci USVString https://developer.mozilla.org/en-US/docs/Web/API/USVString a metoda json() obiekt w postaci JSON https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON. Metodę blob() natomiast używamy w przypadku otrzymania np. plików z grafiką (jpg, png itp.)

(async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/users/1')
  const json = await response.json()
  console.log(json);
})();

Wynikiem działania powyższego kodu jest wypisanie na konsoli właściwości body w formacie JSON

{
  "id": 1,
  "name": "Leanne Graham",
  "username": "Bret",
  "email": "Sincere@april.biz",
  "address": {
    "street": "Kulas Light",
    "suite": "Apt. 556",
    "city": "Gwenborough",
    "zipcode": "92998-3874",
    "geo": {
      "lat": "-37.3159",
      "lng": "81.1496"
    }
  },
  "phone": "1-770-736-8031 x56442",
  "website": "hildegard.org",
  "company": {
    "name": "Romaguera-Crona",
    "catchPhrase": "Multi-layered client-server neural-net",
    "bs": "harness real-time e-markets"
  }
}


type

Obiekt Response może posiadać jeden z następujących typów:

basic - typ podstawowy, spełniający zasadę "same-origin" (https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) z dostępnymi wszystkimi nagłówkami oprócz “Set-Cookie” i “Set-Cookie2”,

cors - odpowiedź została zwrócona z żądania "cross-origin" z nagłówkami CORS, czyli na przykład strona zażądała danych z serwera, który nie znajduje się w tej samej domenie. Dodatkowo serwer ma możliwość dzielenia się zasobami za pomocą specyfikacji CORS (więcej na ten temat można przeczytać na stronie enable-cors.org (https://enable-cors.org/) lub w specyfikacji W3C (https://www.w3.org/TR/cors/)). Lista dostępnych nagłówków ograniczona jest do `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, and `Pragma`,

opaque - tego typu odpowiedź zwracana jest gdy komunikacja odbywa się pomiędzy różnymi domenami lecz bez użycia nagłówków CORS.

Request

Request pozwala nam w sposób obiektowy zarządzać danymi które chcemy przesłać w żądaniu.
Spróbujmy zatem za pomocą poznanej wcześniej metody fetch() oraz obiektu Request wykonać żądanie do serwera.

Zanim jednak stworzymy obiekt Request zastanówmy się jakie dane chcemy wysłać w żądaniu.


const headers = new Headers();
myHeaders.append('Content-Type', 'image/jpeg');

const options = { 
method: 'GET',
headers: myHeaders,
mode: 'cors',
cache: 'default'
};

Powyżej przykład w jakim jawnie możemy zadeklarować z jakiej metody HTTP będzie korzystał nasz obiekt Request, oraz jakie nagłówki powinien wysłać. Dodatkowo ustawiliśmy parametr mode na cors, w przypadku przeglądari Firefox domyślnym trybem mode jest cors. Inaczej się to ma jednak w przypadku Chrome gdzie do wersji Chrome 47 domyślnym trybe był no-cors, a od wersji Chrome 47 (włącznie) domyślnym trybeb jest same-origin.
Zmienna cache ustawiona na default informuje przeglądarkę że ma pobrać zasób jeśli w pamięci Cache nie znalazła pasującego do zapytania elementu. Jeśli zasób trzymany w cache nie jest aktualny przeglądarka wykonana tzw. zapytanie warunkowe (conditional request https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests) i na jego podstawie zdecyduje czy pobrać nowy zasób czy skorzystac z tego który posiada w cache.

Następnie przechodzimy do osadzenia obiektu w metodzie fetch().

const image = document.querySelector('img');

fetch(request).then(function(response) {
  return response.blob();
}).then(function(response) {
  image.src = URL.createObjectURL(response);
});

Obiekt Request przekazujemy do metody fetch() w ten sam sposób co wcześniej przekazywalismy do niej parametr URL.
Na podstawie danych z obiektu metoda fetch wykona żądanie i zwróci otrzymaną odpowiedź.






Podsumowanie.

Fetch API stało się standardem już w 2015 roku, dzięki czemu otrzymaliśmy całkiem przyjemne API umożliwiające asynchroniczne pobieranie zasobów z sieci, a wprowadzone obiekty z koleji pomagają nam w pracy z Service Workerami. Wprowadzony standard rozwiązuję większość problemów z którymi borykalismy się podczas pracy z XHR, jednakże nie jest wolny od wad.
Najczęściej w tym kontekście wspomina się o utrudnionym przechwytywaniu błędów HTTP, braku możliwości śledzenia postępu oraz braku możliwości przerwania uruchomionego procesu fetch(). Jeśli chodzi o przerwanie metody fetch() na stronie Mozilli można znależć propozycję rozwiązania tego problemu za pomocą AbortSignal (https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal), niestety rozwiązanie to jest nadal w fazie eksperymentu



Ma też swoje problemy Along with the transition to streams, Fetch will eventually have the ability to abort running fetch()es and some way to report the progress of a fetch. These are provided by XHR, but are a little tricky to fit in the Promise-based nature of the Fetch API.

Obiekty 

Fetch API jest wspierane we wszystkich nowoczesnych przegladarkach
fetch_api_support.png,
jeśli jednak istnieje konieczność użycia na niewspieranej platformie - można użyć polify: https://github.com/github/fetch








If you need to use Fetch in Node.js, two of the most popular options are isomorphic-fetch and node-fetch.


Wady. !!!!!1
https://medium.com/@shahata/why-i-wont-be-using-fetch-api-in-my-apps-6900e6c6fe78
Jak poradzić sobie z wyżej opisaną wadą: https://css-tricks.com/using-fetch/
Obsługa błędów - porównanie z axios

Abort Signal
https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal

Linki:
https://flaviocopes.com/fetch-api/
https://hacks.mozilla.org/2015/03/this-api-is-so-fetching/
https://developers.google.com/web/updates/2015/03/introduction-to-fetch
https://medium.com/@shahata/why-i-wont-be-using-fetch-api-in-my-apps-6900e6c6fe78
https://scotch.io/tutorials/how-to-use-the-javascript-fetch-api-to-get-data
https://css-tricks.com/using-fetch/
https://www.sitepoint.com/introduction-to-the-fetch-api/
https://jakearchibald.com/2015/thats-so-fetch/


http://kursjs.pl/kurs/ajax/fetch.php
https://blog.piotrnalepa.pl/2017/01/15/js-fetch-api-nowy-sposob-na-pobieranie-danych-z-serwera/


https://medium.com/beginners-guide-to-mobile-web-development/the-fetch-api-2c962591f5c
https://alligator.io/js/fetch-api/
