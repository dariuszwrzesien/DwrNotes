PWA_progressive_web_apps_implementacja.png

W poprzednim wpisie na temat Progressive Web Apps (link !!!) przedstawiłem ogólne pojęcia dotyczące aplikacji progresywnych oraz przedstawiłem narzędzia z których możemy korzystać podczas przygotowania aplikacji PWA. Dzisiaj chciałbym rozszerzyć pokazaną wcześniej implementację service workera oraz manifestu oraz użyć ich w przygotowanej aplikacji.

Zanim jednak zaczniemy implementację Service Workera chciałbym abyście zapoznali się/ przypomnieli siobie sposób działania obietnic (Promise (link)) oraz Fetch Api (link). Opisywany we wczesniejszych artykułach
Zrozumienie zasady ich działania będzie konieczne w pracy z Service Workerami


opisać sposób działania obietnic (Promise) dla tych którzy nie mieli jeszcze okazji się z nimi zapoznać. Zrozumienie zasady ich działania będzie konieczne w pracy z Service Workerami. Jesli jednak znasz już Obietnice to spokojnie możesz opuścić ten podrozdział. 


LINK do Artykułu obietnice !!!

(Znajdziesz tam wszystko co niezbędne na temat obietnic aby rozpocząć pracę z SerwiceWorkerami)
Na tę chwilę to wszystko co musimy wiedzieć na temat obietnic aby móc zacząć pracę z ServiceWorkerami.

Fetch API

W pierwszym przykładzie dotyczącym obietnic zasugerowałem w komentarzu użycie metody ajaxowej na pobranie danych. Jest jednak na to wygodniejszy sposób a otrzymany rezultat będzie obiektem Promise. Mowa oczywiście o Fetch API (https://developer.mozilla.org/es/docs/Web/API/Fetch_API). Jest nowym narzędziem umożliwiającym komunikację z zewnętrzymi zasobami. Przede wszytskim Fetch API dostarcza nam globalną metodę fetch(), która zapewnie łatwy sposób asynchronicznego pobierania zasobów z sieci. Przyjrzyjmy się poniższemu przykładowi.

https://jsfiddle.net/96na06jh/

(() => {
  fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then((response) => {
    return response.json();
  })
  .then((data) => {
    alert(data.userId);
    console.log(data);
  })
  .catch((err) => {
        alert(err);
  });
})();

Widzimy że metoda fetch() zwraca nam obiekt Promise, który następnie parsujemy z wykorzystaniem medoty json() (https://developer.mozilla.org/en-US/docs/Web/API/Body/json). Na końcu w oknie alert wyświetlamy id użytkownika a całość danych prezentujemy w konsoli przeglądarki.














VUE todo app
https://scotch.io/tutorials/build-a-to-do-app-with-vue-js-2#prerequisites



PLAN:
1. Promise
2. Fetch API
3. Cache API
4. Tutorial VUE2 - (Appka TODO ?)
5. Notyfikacje - web Notyfikacje + push notyfikacje
6. Http2 - implementacja w nodejs i Server push - no tutaj to oprócz tytułu to nic nie wiem - wiec zebranie materiału zajmie mi pewnie troche
7. Implementacja PWA do apki stworzonej na VUE2



