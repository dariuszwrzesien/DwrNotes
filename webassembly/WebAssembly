logo-bck.jpg

WebAssembly. Gdy Microsoft, Mozilla i Google pracują nad jedną technologią to wiec że coś się dzieje ...

Ale zanim przejdę do omawiania głównego tematu jakim jest WebAssembly, opisze dotychczasowe rozwiązania bo koncepcja stojąca za WebAssmebly nie jest wcale nowa.

Od dłuższego czasu producenci przeglądarek internetowych pracowali nad wprowadzeniem możliwości uruchomienia skopilowanego kodu C/C++ bezpośrednio w przeglądarce. W 2011 roku przy okazji debiutu Chrome OS, Google zaprezentowało Native Clienta (NaCl), środowisko w którym można było używać skompilowanego kodu C/C++.
Niestety NaCl posiadał bardzo ograniczoną kompatabilność, skompilowany kod uruchamiał się tylko na maszynach z procesorami x86. Poprawiono to w kolejnej wersji o nazwie Portable Native Client (pNaCl) jednakże środowisko to nie odniosło spektakularnego sukcesu.

W roku 2013 Mozilla wprowadziła własną platformę asm.js, działającą we wszystkich przeglądarkach z wydajnością zbliżoną do natywnej. Asm.js umożliwiał uruchomienie oprogramowania napisanego w C, przy zachowaniu wydajności znacznie lepszej niż standardowy JavaScript, między innymi dzięki zastosowaniu statycznego typowania oraz ograniczeniu niektórych cech języka Javascript do podatnych na optymalizację AOT (https://en.wikipedia.org/wiki/Ahead-of-time_compilation). Kompilacja w asm.js wygląda następująco:

kompilacja-asm.jpg

Kod źródłowy napisany w C/C++ zostaje skompilowany do kodu bajtowego LLVM, a następnie Emscripten kompiluje go do JavaScriptu (asm.js).

Asm.js niestety posiada też swoje wady. Pomimo że wzrost prędkości jest znaczący w porównaniu do zwykłageo Javascriptu, asm.js nie daje nam żadnej gwaracji że aplikacja będzie działać z tą samą prędkością we wszystkich przeglądarkach, spowodowane jest to brakiem otwartego standardu oraz nieformalną specyfikacją utrudniającą wdrożenie asm.js we wszystkich przeglądarkach jednakowo.

Mimo to Asm.js odniósł spory sukces. Quake, Doom czy Linux przeniesione do przeglądarki internetowej to tylko nieliczne rezultaty zastosowania asm.js.

Microsoft co prawda nie prowadziło zaawansowanych prac nad własną dedykowaną platformą do kompilacji kodu z C/C++ do Javascript, wybrało jednak nieco odmienną strategię, prezentując w 2012 roku TypeScript. TypeScript to nadzbiór języka JavaScript, który kompiluje się do standardowego Javascriptu. Dużą zaletą TypeScriptu jest jego statyczne typowanie z zastosowaną inferencją typów.

Jak widać, wszyscy główni producenci przeglądarek internetowych posiadają swoją "alternatywę" dla języka JavaScript i najwidoczniej doszli także do wniosku że ich dotychczasowe rozwiązania nie są wystarczająco dobre, dlatego też połączyli wspólnie siły w pracy nad WebAssembly.

WebAssembly jest nowym rodzajem języka, który może być uruchomiony w nowoczesnych wersjach przeglądarek internetowych. WebAssembly nazywany też WASM, to język niskopoziomowym, który działa z szybkością zbliżoną do rozwiązań natywnych i pozwala na kompilacje kodu napisanego w C/C++ do kodu binarnego działającego w przeglądarce internetowej. Co również ważne WebAssembly jest opracowywany jako otwarty standard webowy, nie jest w żaden sposób opatentowany ani chroniony prawami autorskimi. Nad całością projektu czuwa W3C WebAssembly Working Group (https://www.w3.org/wasm/).

Na dzień dzisiejszy (2017-11-05) wsparcie dla WASM wygląda następująco
wasm-status.png 

Aktualną tabelę można znależć na http://caniuse.com/#feat=wasm

Czym WebAssembly nie jest?

WebAssembly nie jest tworzony z myślą o zastąpieniu Javascriptu, a raczej jego uzupełnieniu.
WebAssembly jest uruchamiany w tej samej maszynie wirtualnej (VM) co JavaScript, dzięki czemu możemy czerpać korzyści z obu tych języków. WebAssembly da nam możliwość przygotowania modułów, które będziemy mogli używać w aplikacjach napisanych w JavaScripcie.

Wynikowy kod WebAssembly nie jest kompilowany do JavaScript jak ma to na przykład miejsce w przypadku CoffeScript lub we wcześniej wspomnianym TypeScripcie lub asm.js.

WebAssembly to nie język programowania, którym posługują się programiści. WebAssembly jest kodem bajtowym tworzonym przez odpowiednie narzędzia a nie przez programistów.

Obszary zastosowania:

Głównymi obszarami zastosowania dla WASM są: 
1. gry, 
2. multimedia (rozpoznawanie obrazów, edycja video, aplikacje typu CAD)
3. możliwość wykorzystania istniejących rozwiązań napisanych w C/C++ (OpenCV, Box2D, DICOM)
4. 64-bitowe obliczenia matematyczne (SHA512,  Fractal Calculations)

Pierwsze kroki z WebAssembly.

Po tym  przydługawym wstępnie czas na trochę praktyki. Poniżej przedstawie w kilku krokach jak zacząć przygodę z WebAssembly.

1. Zacznijmy od pobrania i zainstalowania Portable Emscripten SDK (Linux & OS X version)
https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz
lub z mojego githuba

Po rozpakowaniu z poziomu terminala wydajemy polecenia:

$ ./emsdk update
$ ./emsdk install latest


Po zaninstalowaniu Emscripten SDK posiadamy cały niezbędny zestaw narzędzi (Clang, Python, Node.js oraz integrację z Visual Studio) aby zacząć pracę z WebAssembly.

Gdy instalacja się zakończy należy aktywować SDK:

$ ./emsdk activate latest
$ source ./emsdk_env.sh  # możesz dodać tę linię do .bashrc

2. Utwórzmy prosty program w C. Nasz program losuję liczbę z zakresu od 1 do 6 co odpowiada rzutowi kostką do gry.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char ** argv) {
    printf("Wczytano moduł WebAssembly \n");
}

int roll_dice() {
    srand ( time(NULL) );
    return rand() % 6 + 1;
}

Zapisz powyższy kod do pliku diceroll.c

3. Kompilacja z C do .wasm

emcc diceroll.c -O1 -o diceroll.wasm -s WASM=1

Gdzie:

emcc - to kompilator Emscriten
diceroll.c - plik z kodem źródłowym w C (input)
-01 - Poziom optymalizacji 
-o diceroll.wasm - plik z kodem WebAssembly (output)
-s WASM=1 - informacja dla kompilatora aby pracował w trybie WASM, jeśli nie ustawimy tej flagi domyślnie kompilator pracuje w trybie asm.js

4. Hurra !!! właśnie utworzyliśmy nasz pierwszy moduł w WebAssmebly.

Niestety  sam plik .wasm nie robi niczego spektakularnego. Przyjrzyjmy się poniższemu schematowi.
kompilacja-wasm.jpg
Jak widać na schemacie, kod źródłowy napisany w języku C/C++ jest kompilowany do pliku .wasm. Plik ten jest modułem WASM który dopiero za pomocą JavaSctiptu dołączony zostanie do strony i przesłany do przeglądarki.

Skompilujmy zatem jeszcze raz nasz program - ale teraz użyjmy nazwy diceroll.js jako pliku wynikowego.

emcc diceroll.c -O1 -o diceroll.js -s WASM=1

Gdzie:

emcc - Kompilator Emscripten
diceroll.c - Plik z kodem źródłowym napisanym w C (input)
-s WASM=1 - Ustawiamy flagę kompilatora na WASM=1, w innym razie zostanie wygenerowany kod asm.js
-o diceroll.wasm - plik wynikowy (output)

Kompilator utworzy pliki diceroll.wasm i diceroll.js. Plik z rozszerzeniem .wasm jest modułem WebAssembly a diceroll.js plikiem, który pozwoli nam załadować ten moduł do przeglądarki.

5. Załadujmy moduł do przeglądarki

Utwórz plik index.html o następującej treści.

<!DOCTYPE html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>WebAssembly</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
  </head>
  <body>
    <script src="diceroll.js"></script>
  </body>
</html>

6. Uruchom Web server

Możemy posłużyć się web serwerem dostarczonym wraz z Emscripten SDK. W tym celu, będąc w katalogu roboczym uruchom z poziomu terminala:

emrun --no_browser --port 8080 .

Otwórz stronę localhost:8080/index.html i zajrzyjmy do konsoli. Powinien pojawić sie komunikat:
Wczytano moduł WebAssmebly.
Firefox 52+ oraz Chrome 67+ mają domyślnie włączoną obsługę Webassembly, jeśli jednak używasz wcześniejszej wersji może być konieczne ręczne właczenie obsługi Webassembly.

7. Ostatnią rzeczą jaka została nam do zrobienia to wykorzystanie modułu WebAssembly z poziomu JavaScript.

<!DOCTYPE html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>WebAssembly</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <div class="dice dice-6"></div>
    <span>kliknij aby rzucić kostką</span>  
  
    <script src="diceroll.js"></script>

    <script>
      var dice = document.querySelector('.dice');
      dice.addEventListener('click', function() {

	//w tym miejscu odwołujemy się do funkcji napisanej w C
        var result = _roll_dice();

        dice.className = "dice dice-" + result;                   
      });
    </script>
  </body>
</html> 




Podsumowanie.

Webassembly to długo wyczekiwany, kolejny, kamień milowy w rozwoju przeglądarek internetowych.
Przypomnijmy że zaprojektowany w 1995 roku Javascript nie był pisany z myślą o obsłudze dużych aplikacji internetowych, to dzięki ogromenj pracy twórców przeglądarek internetowych i wprowadzeniu bardzo wydajnych silników Javascript (jak np. V8, SpiderMonkey) od niedawna możemy cieszyć się szybkim działaniem Javascriptu. Jednakże nic nie może równać się z możliwością uruchomienia kodu bajtowego tak blisko "metalu" jaką daje nam WebAssembly. Jeśli chcesz zgłębić temat bardziej wnikliwie polecam zajrzeć na https://github.com/mbasso/awesome-wasm.

Plan rozwoju (road map) mozna zobaczyć tutaj https://wasmdash.appspot.com/


Pytania:
Czy webassembly ma dostęp do WebApi (kamerki itd)?
Czy komunikacja z modułem WebAssmebly jest synchroniczna czy asynchroniczna?









. 

Ale dlaczego potrzebujemy WebAssembly:

1. Wydajność.

Wydajność języka javascript jest ograniczona jego architekturą, mam tutaj na myśli to że jest to język z założenia którym posługuja się ludzie do komunikacji z komputerem. I przez to ma swoje ogranczenia.
Przyjrzyjmy się na przykład jak wygląda realizacja tej prostej funckji przez silnik javascipt:

funcition a+b 


przerysować schemat z https://www.youtube.com/watch?v=6v4E6oksar0


Do czego dążą nowoczesne kompilatory to jak największe skrócenie tej drogi. Najlepiej by było aby a+b można wykonać za pomocą jednej dyrektywy na CPU. I do tgo własnie słuzy Webassembly. 

Obecnie webassemby działa z prędkoscią 1.2x native ?


Różnica pomiedzy asm.js a webassembly

Czy webassembly ma dostep do WebApi(co to jest WebApi) do kamerki itp ?


WebAssembly status na dzisiaj https://www.youtube.com/watch?v=6v4E6oksar0 23 minuta


DEMO

CONWAY GAME OF LIVE
MANDEKBROT VISUALIZATION
WEB DSP - wideo editor in a browser



Poczytać
https://rsms.me/wasm-intro
https://kripken.github.io/mloc_emscripten_talk/cppcon.html#/18


ŹRÓDŁA
https://www.youtube.com/watch?v=AFy5TdrFG9Y



https://www.youtube.com/watch?v=iJL59lh4IJA
https://www.youtube.com/watch?v=6v4E6oksar0
https://www.youtube.com/watch?v=DKHuEkmsx3M
https://www.youtube.com/watch?v=PvZdTZ1Nl5o
https://www.youtube.com/watch?v=kq2HBddiyh0
https://www.youtube.com/watch?v=6owJlpaV0XA
https://www.youtube.com/watch?v=S8uAeC-6CMU



zbiór wszystkiego o WASM
https://github.com/mbasso/awesome-wasm
