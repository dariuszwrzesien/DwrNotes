Ładny wstęp i nie tylko
https://www.youtube.com/watch?list=PL37ZVnwpeshFmAPr65sU2O5WMs7_CGjs_&v=HktWin_LPf4
https://www.youtube.com/watch?v=bac0dGQbUto

Explorer webassembly
https://mbebenita.github.io/WasmExplorer/
https://webassembly.studio/

Wprowadzenie do webassembly
https://www.youtube.com/watch?v=6Qw_FDaKwgk

https://www.youtube.com/watch?v=6Y3W94_8scw

https://www.youtube.com/watch?time_continue=15&v=iJL59lh4IJA

https://medium.com/@devongovett/parcel-v1-5-0-released-source-maps-webassembly-rust-and-more-3a6385e43b95
https://blog.sessionstack.com/how-javascript-works-a-comparison-with-webassembly-why-in-certain-cases-its-better-to-use-it-d80945172d79

Fajne wykorzystanie obrazka z naiwiązaniem do innego świetnego wykładu na temat WebAssemblyhttps://www.youtube.com/watch?v=_5IjJi74KFA minuta 4.07

Z premedytacją wybrałem ten rysunek aby polecić Wam świetny wykład: Imie Nazisko - dostępny w sieci pod tym adresem.
Ale co takiego stało się w 2008 roku a dokładniej (data) - czy ktoś może wie,
Google chrome został wydany a wraz z nim v8?

ZObacz minute 30


Co z bezpieczeństwem ?







1. Wstęp

- przywitanie
- pytania: kto NIE słyszał o Webassembly? kto coś kompilował pod Webassembly ?

2. Zanim powstało WebAssmebly - objaśnienie dlaczego cofamy się do początku JavaScriptu.

Zanim przejdę do omawiania tego wspanaiłego języka jakim jest Webassembly, cofnijmy się nieco w czasie aby zrozumieć dlaczego w ogole potrzbujemy czegoś takiego jak Webassembly oraz dotychczasowe rozwiązanie, ponieważ koncepcja stojąca za WeAssembly nie jest wcale nowa.

Rok 1995.

Ktoś wytwarzał już oprogramowanie w tym roku ? - jasne tyle ludzie nie żyją. 
Ktoś może wie co takiego szczególnego wydarzyło się w tym roku ?

Światło dzienne ujrzała przeglądarka Netscape w wersji 2 a wraz z nią, takie killer ficzery jak:
animowane gify oraz zaimplementowany język javascript.

Napewno każdy zna historię stojącą za powstaniem tego dzieła.
- stworzony w  10 dni,
- nie był tworzony z myślą o szybkim działaniu na dużych zbiorach danych
- brak typu integer tylko float64

Generalnie miał umozliwić prostą interakcję z elementami na stronie internetowej.

Niestety ponieważ JavaScript jak dotąd był jedynym narzędziem umożliwiającym programowanie w przeglądarce,
zaczęto z niego wyciskać siódme poty aby sprostał coraz to większym wymaganią stawianym przez użytkowników.

Przełomowy jest w tym kontekście rok 2008 (koszulka).

Czy ktoś może wie co takiego szczególnego wydarzyło się 2008 roku a dokładnie 2 września 2008 roku ?
Wydana została przeglądarka chrome wraz z super szybkim silnikiem javascriptu v8 w którym zaimplementowano JIT compiler

V8 było bardzo szybkie ale Google i Mozilla zdawali sobie sprawę że potrzeba czegoś więcej, szukali możliwości uruchomienia kodu z predkością bliską predkości natywnej.



9. Nacl . W 2011 roku, przy okazji debiutu Chrome OS, Google zaprezentowało Native Clienta (NaCl) – środowisko, w którym można było używać skompilowanego kodu C/C++. Niestety NaCl posiadał ograniczoną kompatybilność, skompilowany kod uruchamiał się tylko na maszynach z procesorami x86. Poprawiono to w kolejnej wersji o nazwie Portable Native Client (pNaCl), jednakże środowisko to nie odniosło spektakularnego sukcesu.

10. asm.js W roku 2013 Mozilla wprowadziła własną platformę asm.js działającą we wszystkich przeglądarkach z wydajnością zbliżoną do natywnej. Asm.js umożliwiał uruchomienie oprogramowania napisanego w C/C++ skompilowanego do JavaScriptu, zachowując wydajności znacznie lepszą niż rozwiązania napisane w standardowy sposób.

Asm.js niestety posiada też swoje wady. Pomimo, że wzrost prędkości jest znaczący, w porównaniu do zwykłego JavaScriptu, asm.js nie daje nam żadnej gwarancji, że aplikacja będzie działać z tą samą prędkością we wszystkich przeglądarkach. Spowodowane jest to brakiem otwartego standardu oraz nieformalną specyfikacją utrudniającą wdrożenie asm.js we wszystkich przeglądarkach jednakowo.

Mimo to asm.js odniósł spory sukces. Quake, Doom czy Linux przeniesione do przeglądarki internetowej to tylko nieliczne rezultaty zastosowania asm.js.

Webassembly jest sukcesorem asm.js 

https://www.youtube.com/watch?v=6Qw_FDaKwgk
https://www.youtube.com/watch?v=6Y3W94_8scw
https://www.youtube.com/watch?v=_5IjJi74KFA


